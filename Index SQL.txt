An index in SQL Server is 
a database object that 
improves the speed of 
data retrieval operations on 
a table or view
/index optimize query performance/  

Indexes are typically created on 
Frequently used Columns in 
Search conditions/WHERE/, 
Join conditions /JOIN/, 
Ordering /ORDER BY/. 

They work similarly to 
an index in a book, where 
you can quickly find the page number 
without reading the entire book.

Main Types of Indexes:
 - Clustered Index,
 - Non-Clustered Index,
 - Unique Index,
 - Full-text Index,
 - Filtered Index,
 - Columnstore Index
 - XML Index, 
 - Spatial Index

1. Clustered Index:  
Sorts the data rows in the table 
according to the indexed column(s). 

A table can have only 1 clustered index 
because the data can only be sorted in one way.
  
CREATE CLUSTERED INDEX idx_clustered ON Employees (LastName);

2. Non-Clustered Index
/regular b-tree index/ 
подредбата на редовете не съвпада с 
физическия ред на действителните данни. 

Подредбата е от колоните, 
които съставляват индекса. 

leaf pages на индекса 
не съдържат действителни данни, 
а вместо това съдържат pointers 
към действителните данни. 

Тези pointers биха посочили страницата 
с данни за клъстерирани индекс, 
където съществуват действителните данни 
/или heap page, ако на таблицата 
 не съществува клъстериран индекс/.

max. of 999 non-clustered indexes 
on a single table.

CREATE NONCLUSTERED INDEX idx_nonclustered ON Employees (FirstName);

Why non-clustered indexes?

Осигурява бърз достъп до данни. 
Индексът позволява на двигателя на базата данни 
да локализира данни бързо, без да се налага 
да сканира през цялата таблица. 

Тъй като таблицата се увеличи, 
е много важно правилните индекси 
да се добавят към таблицата, 
тъй като без никакви показатели за ефективност 
performance will drop off dramatically.

When should 
non-clustered indexes 
be created?

Има 2 случая, при които да има 
некластериран индекс на таблица е полезно. 

1. when there is more than 1 set of columns 
that are used in the WHERE clause of queries 
that access the table.

2. to improve the performance of 
frequently used queries 
not covered by the clustered index or 
to locate rows in a table 
without a clustered index.
 
когато има повече от 
1 set от колони, които се използват в 
WHERE clause за queries 
that access the table.

Втори индекс: ако приемем, че 
вече има клъстериран индекс в 
колоната на първичния ключ ще ускори 
времето за изпълнение и ще намали IO 
за останалите заявки. 

ако вашите заявки често изискват 
да се връщат данни в определен ред, 
наличието на индекс на тези колони може да 
reduce the amount of CPU and memory
тъй като няма да е необходимо допълнително 
сортиране, тъй като данните в индекса 
вече са подредени.
 

3. Unique Index:
Ensures that all the values in 
the indexed column(s) are unique.

A unique index can be clustered or non-clustered.

CREATE UNIQUE INDEX index_name
ON table_name(column_list);

A unique index may consist of one or many columns
 In case the unique index has multiple columns, 
 the combination of values in these columns is unique.
 
 Any attempt to 
 insert or update data into 
 the unique index key columns 
 that cause the duplicate will 
 result in an error.
 
CREATE UNIQUE NONCLUSTERED INDEX idx_unique ON Employees (Email);

4. Full-text Index:
used for fast text searches on 
large textual data.

CREATE FULLTEXT INDEX ON Documents (Content)
    KEY INDEX PK_Documents;
	
This allows you to search for 
words or phrases within 
text data efficiently, rather than relying 
on the basic SQL LIKE operator, 
which can be slow for large datasets.

4.1. When to Use 
Full-Text Indexes?

a. You need to search for 
specific words or phrases within large text columns 
/such as varchar, nvarchar, or text types/.

- You want to perform advanced searches:
- Searching for exact word matches
- Searching for words that are close to 
  each other in a document
- Ranking search results by relevance

b. You want to perform Boolean searches 
   "AND", "OR", "NOT"

4.2. Creating Full-Text Indexes:
-- First, create the Full-Text Catalog (if one doesn't exist)
CREATE FULLTEXT CATALOG MyCatalog AS DEFAULT;

-- Now, create the Full-Text Index
CREATE FULLTEXT INDEX ON MyTable(ColumnToSearch)
KEY INDEX PK_MyTable -- Primary key of the table
ON MyCatalog;

4.3. Requirements for Full-Text Index:
-You need to have the Full-Text Search feature 
    enabled in SQL Server.
-You must have a unique index 
    (typically a primary key or unique constraint) 
	 on the table that you want to index.

4.4. Search Queries with Full-Text Indexes:
CONTAINS: Used for checking 
if a word or phrase exists in a column.

SELECT * FROM MyTable
WHERE CONTAINS(ColumnToSearch, 'word');

FREETEXT: Used for checking 
if a word or phrase "sounds like" the text in 
a column (natural language search).

SELECT * FROM MyTable
WHERE FREETEXT(ColumnToSearch, 'word');

CONTAINSTABLE: Returns a table of 
results with the relevance ranking.

SELECT * FROM MyTable
INNER JOIN CONTAINSTABLE(MyTable, ColumnToSearch, 'word') 
AS ft ON MyTable.ID = ft.[KEY];

4.5. When to Consider Full-Text Indexes:
- Large Text Data: 
 When you have large text fields that 
 need fast search capabilities.

- Relevance Ranking: 
 If you need to rank results by 
 relevance based on the search term.

- Complex Queries: 
 If you need to perform searches with 
 logical operators, phrases, or 
 proximity searches.

4.6. Things to Keep in Mind:
- Full-text indexes are case-insensitive by default

- Full-text indexing does not support all data types—only 
  text-based types (like varchar, nvarchar, text)
  
- Indexes must be populated after creation, 
  which can take time if the dataset is large

- Full-text indexes require regular maintenance and 
  updates to stay in sync with changes in the data.

4.7. Example Use Case:

Suppose you have a table Documents 
with a column Content of type varchar(max) and 
you want to search for documents 
containing specific words:

-- Create Full-Text Catalog and Index
CREATE FULLTEXT CATALOG DocCatalog AS DEFAULT;
CREATE FULLTEXT INDEX ON Documents(Content) KEY INDEX PK_Documents ON DocCatalog;

-- Search for documents containing the word 'SQL'
SELECT * FROM Documents
WHERE CONTAINS(Content, 'SQL');


5. Filtered Index:
A non-clustered index 
that is created with a filter condition. 

It helps in indexing 
a subset of rows, 
which is useful when you have 
a large table but only need to 
index a portion of it.

CREATE NONCLUSTERED INDEX idx_filtered ON Employees (LastName)
WHERE Department = 'Sales';

6. XML Index
XML indexes are used to improve 
performance on XML data types. 

There are two types of XML indexes: 
primary XML index and 
secondary XML index.

The primary XML index provides 
a base index for XML columns, 
while secondary XML indexes are used to 
support specific query patterns 
like path and value queries.

CREATE PRIMARY XML INDEX idx_xml ON Orders (OrderDetails);
 
How to Check Existing Indexes?
You can view the indexes on 
a table using the following query:

SELECT * 
FROM sys.indexes 
WHERE object_id = OBJECT_ID('Employees');

6. XML Index
 - Specifically designed for XML data types. 
   It helps improve the performance of queries 
   that need to search XML data stored in 
   SQL Server columns.

- There are two types: 
  1.primary XML index (used for efficient storage) and 
  2.secondary XML index (used for specific query patterns).

7. Spatial Index: /спейшъл - пространствен/
   - Used for spatial data types 
     /like geometry and geography types/ 
	 to speed up spatial queries.
	
   - It's an optimized index that 
     supports spatial operations 
	 /distance, intersections/

8. Columnstore Index: 
 - is used for data warehousing and analytics, 
   optimized for read-heavy workloads. 
   Columnstore indexes store data in a columnar format 
   rather than row-wise, enabling better compression and 
   faster querying of large datasets.
 
   използван за съхранение на данни и анализи, 
   оптимизиран за тежки натоварвания на четене. 
   Индексите на колоните съхраняват данните в 
   колонарен формат, а не в ред, 
   което позволява по-добро компресия и 
   по-бързо запитване на големи набори от данни.

 
Benefits of Indexes:

1. Faster Query Performance: 
Indexes speed up data retrieval by allowing 
the database engine to locate data 
without scanning the entire table.

2. Efficient Sorting: 
When used in ORDER BY or GROUP BY clauses, 
indexes help in sorting data more efficiently.

Drawbacks of Indexes:

1. Storage Overhead: 
Indexes take up space in the database.

2. Slower Write Operations: 
Insert, update, and delete operations 
can be slower because 
the index must also be updated 
when data in the indexed columns changes.
